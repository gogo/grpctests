// Code generated by protoc-gen-gogo.
// source: combos/unsafeunmarshaler/bench.proto
// DO NOT EDIT!

/*
	Package bench is a generated protocol buffer package.

	It is generated from these files:
		combos/unsafeunmarshaler/bench.proto

	It has these top-level messages:
		Request
		Small
		Medium
		Big
*/
package bench

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"
import unsafe "unsafe"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Num int64 `protobuf:"varint,1,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorBench, []int{0} }

type Small struct {
	Field3  int32  `protobuf:"varint,3,opt,name=Field3,json=field3,proto3" json:"Field3,omitempty"`
	Field11 uint64 `protobuf:"fixed64,11,opt,name=Field11,json=field11,proto3" json:"Field11,omitempty"`
	Field14 string `protobuf:"bytes,14,opt,name=Field14,json=field14,proto3" json:"Field14,omitempty"`
}

func (m *Small) Reset()                    { *m = Small{} }
func (m *Small) String() string            { return proto.CompactTextString(m) }
func (*Small) ProtoMessage()               {}
func (*Small) Descriptor() ([]byte, []int) { return fileDescriptorBench, []int{1} }

type Medium struct {
	Field1  float64 `protobuf:"fixed64,1,opt,name=Field1,json=field1,proto3" json:"Field1,omitempty"`
	Field2  float32 `protobuf:"fixed32,2,opt,name=Field2,json=field2,proto3" json:"Field2,omitempty"`
	Field3  int32   `protobuf:"varint,3,opt,name=Field3,json=field3,proto3" json:"Field3,omitempty"`
	Field4  int64   `protobuf:"varint,4,opt,name=Field4,json=field4,proto3" json:"Field4,omitempty"`
	Field5  uint32  `protobuf:"varint,5,opt,name=Field5,json=field5,proto3" json:"Field5,omitempty"`
	Field6  uint64  `protobuf:"varint,6,opt,name=Field6,json=field6,proto3" json:"Field6,omitempty"`
	Field7  int32   `protobuf:"zigzag32,7,opt,name=Field7,json=field7,proto3" json:"Field7,omitempty"`
	Field8  int64   `protobuf:"zigzag64,8,opt,name=Field8,json=field8,proto3" json:"Field8,omitempty"`
	Field9  uint32  `protobuf:"fixed32,9,opt,name=Field9,json=field9,proto3" json:"Field9,omitempty"`
	Field10 int32   `protobuf:"fixed32,10,opt,name=Field10,json=field10,proto3" json:"Field10,omitempty"`
	Field11 uint64  `protobuf:"fixed64,11,opt,name=Field11,json=field11,proto3" json:"Field11,omitempty"`
	Field12 int64   `protobuf:"fixed64,12,opt,name=Field12,json=field12,proto3" json:"Field12,omitempty"`
	Field13 bool    `protobuf:"varint,13,opt,name=Field13,json=field13,proto3" json:"Field13,omitempty"`
	Field14 string  `protobuf:"bytes,14,opt,name=Field14,json=field14,proto3" json:"Field14,omitempty"`
	Field15 []byte  `protobuf:"bytes,15,opt,name=Field15,json=field15,proto3" json:"Field15,omitempty"`
}

func (m *Medium) Reset()                    { *m = Medium{} }
func (m *Medium) String() string            { return proto.CompactTextString(m) }
func (*Medium) ProtoMessage()               {}
func (*Medium) Descriptor() ([]byte, []int) { return fileDescriptorBench, []int{2} }

type Big struct {
	Field1  float64  `protobuf:"fixed64,1,opt,name=Field1,json=field1,proto3" json:"Field1,omitempty"`
	Field2  float32  `protobuf:"fixed32,2,opt,name=Field2,json=field2,proto3" json:"Field2,omitempty"`
	Field3  *Medium  `protobuf:"bytes,3,opt,name=Field3,json=field3" json:"Field3,omitempty"`
	Field4  []*Small `protobuf:"bytes,4,rep,name=Field4,json=field4" json:"Field4,omitempty"`
	Field6  uint64   `protobuf:"varint,6,opt,name=Field6,json=field6,proto3" json:"Field6,omitempty"`
	Field7  int32    `protobuf:"zigzag32,7,opt,name=Field7,json=field7,proto3" json:"Field7,omitempty"`
	Field8  *Medium  `protobuf:"bytes,8,opt,name=Field8,json=field8" json:"Field8,omitempty"`
	Field13 bool     `protobuf:"varint,13,opt,name=Field13,json=field13,proto3" json:"Field13,omitempty"`
	Field14 string   `protobuf:"bytes,14,opt,name=Field14,json=field14,proto3" json:"Field14,omitempty"`
	Field15 []byte   `protobuf:"bytes,15,opt,name=Field15,json=field15,proto3" json:"Field15,omitempty"`
}

func (m *Big) Reset()                    { *m = Big{} }
func (m *Big) String() string            { return proto.CompactTextString(m) }
func (*Big) ProtoMessage()               {}
func (*Big) Descriptor() ([]byte, []int) { return fileDescriptorBench, []int{3} }

func (m *Big) GetField3() *Medium {
	if m != nil {
		return m.Field3
	}
	return nil
}

func (m *Big) GetField4() []*Small {
	if m != nil {
		return m.Field4
	}
	return nil
}

func (m *Big) GetField8() *Medium {
	if m != nil {
		return m.Field8
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "bench.Request")
	proto.RegisterType((*Small)(nil), "bench.Small")
	proto.RegisterType((*Medium)(nil), "bench.Medium")
	proto.RegisterType((*Big)(nil), "bench.Big")
}
func (this *Request) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Request")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Request but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Request but is not nil && this == nil")
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	return nil
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Small) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Small)
	if !ok {
		that2, ok := that.(Small)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Small")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Small but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Small but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	if this.Field11 != that1.Field11 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this.Field11, that1.Field11)
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	return nil
}
func (this *Small) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Small)
	if !ok {
		that2, ok := that.(Small)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	if this.Field11 != that1.Field11 {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	return true
}
func (this *Medium) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Medium)
	if !ok {
		that2, ok := that.(Medium)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Medium")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Medium but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Medium but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	if this.Field4 != that1.Field4 {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this.Field4, that1.Field4)
	}
	if this.Field5 != that1.Field5 {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", this.Field5, that1.Field5)
	}
	if this.Field6 != that1.Field6 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	if this.Field7 != that1.Field7 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this.Field7, that1.Field7)
	}
	if this.Field8 != that1.Field8 {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this.Field8, that1.Field8)
	}
	if this.Field9 != that1.Field9 {
		return fmt.Errorf("Field9 this(%v) Not Equal that(%v)", this.Field9, that1.Field9)
	}
	if this.Field10 != that1.Field10 {
		return fmt.Errorf("Field10 this(%v) Not Equal that(%v)", this.Field10, that1.Field10)
	}
	if this.Field11 != that1.Field11 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this.Field11, that1.Field11)
	}
	if this.Field12 != that1.Field12 {
		return fmt.Errorf("Field12 this(%v) Not Equal that(%v)", this.Field12, that1.Field12)
	}
	if this.Field13 != that1.Field13 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this.Field13, that1.Field13)
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this.Field15, that1.Field15)
	}
	return nil
}
func (this *Medium) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Medium)
	if !ok {
		that2, ok := that.(Medium)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	if this.Field11 != that1.Field11 {
		return false
	}
	if this.Field12 != that1.Field12 {
		return false
	}
	if this.Field13 != that1.Field13 {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	return true
}
func (this *Big) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Big)
	if !ok {
		that2, ok := that.(Big)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Big")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Big but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Big but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if !this.Field3.Equal(that1.Field3) {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	if len(this.Field4) != len(that1.Field4) {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", len(this.Field4), len(that1.Field4))
	}
	for i := range this.Field4 {
		if !this.Field4[i].Equal(that1.Field4[i]) {
			return fmt.Errorf("Field4 this[%v](%v) Not Equal that[%v](%v)", i, this.Field4[i], i, that1.Field4[i])
		}
	}
	if this.Field6 != that1.Field6 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	if this.Field7 != that1.Field7 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this.Field7, that1.Field7)
	}
	if !this.Field8.Equal(that1.Field8) {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this.Field8, that1.Field8)
	}
	if this.Field13 != that1.Field13 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this.Field13, that1.Field13)
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this.Field15, that1.Field15)
	}
	return nil
}
func (this *Big) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Big)
	if !ok {
		that2, ok := that.(Big)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	if !this.Field3.Equal(that1.Field3) {
		return false
	}
	if len(this.Field4) != len(that1.Field4) {
		return false
	}
	for i := range this.Field4 {
		if !this.Field4[i].Equal(that1.Field4[i]) {
			return false
		}
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	if !this.Field8.Equal(that1.Field8) {
		return false
	}
	if this.Field13 != that1.Field13 {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	return true
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bench.Request{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Small) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bench.Small{")
	s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	s = append(s, "Field11: "+fmt.Sprintf("%#v", this.Field11)+",\n")
	s = append(s, "Field14: "+fmt.Sprintf("%#v", this.Field14)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Medium) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&bench.Medium{")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	s = append(s, "Field4: "+fmt.Sprintf("%#v", this.Field4)+",\n")
	s = append(s, "Field5: "+fmt.Sprintf("%#v", this.Field5)+",\n")
	s = append(s, "Field6: "+fmt.Sprintf("%#v", this.Field6)+",\n")
	s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	s = append(s, "Field8: "+fmt.Sprintf("%#v", this.Field8)+",\n")
	s = append(s, "Field9: "+fmt.Sprintf("%#v", this.Field9)+",\n")
	s = append(s, "Field10: "+fmt.Sprintf("%#v", this.Field10)+",\n")
	s = append(s, "Field11: "+fmt.Sprintf("%#v", this.Field11)+",\n")
	s = append(s, "Field12: "+fmt.Sprintf("%#v", this.Field12)+",\n")
	s = append(s, "Field13: "+fmt.Sprintf("%#v", this.Field13)+",\n")
	s = append(s, "Field14: "+fmt.Sprintf("%#v", this.Field14)+",\n")
	s = append(s, "Field15: "+fmt.Sprintf("%#v", this.Field15)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Big) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&bench.Big{")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	if this.Field3 != nil {
		s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	}
	if this.Field4 != nil {
		s = append(s, "Field4: "+fmt.Sprintf("%#v", this.Field4)+",\n")
	}
	s = append(s, "Field6: "+fmt.Sprintf("%#v", this.Field6)+",\n")
	s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	if this.Field8 != nil {
		s = append(s, "Field8: "+fmt.Sprintf("%#v", this.Field8)+",\n")
	}
	s = append(s, "Field13: "+fmt.Sprintf("%#v", this.Field13)+",\n")
	s = append(s, "Field14: "+fmt.Sprintf("%#v", this.Field14)+",\n")
	s = append(s, "Field15: "+fmt.Sprintf("%#v", this.Field15)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBench(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringBench(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Bencher service

type BencherClient interface {
	BigStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_BigStreamClient, error)
	MediumStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_MediumStreamClient, error)
	SmallStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_SmallStreamClient, error)
}

type bencherClient struct {
	cc *grpc.ClientConn
}

func NewBencherClient(cc *grpc.ClientConn) BencherClient {
	return &bencherClient{cc}
}

func (c *bencherClient) BigStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_BigStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bencher_serviceDesc.Streams[0], c.cc, "/bench.Bencher/BigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bencherBigStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bencher_BigStreamClient interface {
	Recv() (*Big, error)
	grpc.ClientStream
}

type bencherBigStreamClient struct {
	grpc.ClientStream
}

func (x *bencherBigStreamClient) Recv() (*Big, error) {
	m := new(Big)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bencherClient) MediumStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_MediumStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bencher_serviceDesc.Streams[1], c.cc, "/bench.Bencher/MediumStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bencherMediumStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bencher_MediumStreamClient interface {
	Recv() (*Medium, error)
	grpc.ClientStream
}

type bencherMediumStreamClient struct {
	grpc.ClientStream
}

func (x *bencherMediumStreamClient) Recv() (*Medium, error) {
	m := new(Medium)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bencherClient) SmallStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Bencher_SmallStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bencher_serviceDesc.Streams[2], c.cc, "/bench.Bencher/SmallStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bencherSmallStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bencher_SmallStreamClient interface {
	Recv() (*Small, error)
	grpc.ClientStream
}

type bencherSmallStreamClient struct {
	grpc.ClientStream
}

func (x *bencherSmallStreamClient) Recv() (*Small, error) {
	m := new(Small)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bencher service

type BencherServer interface {
	BigStream(*Request, Bencher_BigStreamServer) error
	MediumStream(*Request, Bencher_MediumStreamServer) error
	SmallStream(*Request, Bencher_SmallStreamServer) error
}

func RegisterBencherServer(s *grpc.Server, srv BencherServer) {
	s.RegisterService(&_Bencher_serviceDesc, srv)
}

func _Bencher_BigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BencherServer).BigStream(m, &bencherBigStreamServer{stream})
}

type Bencher_BigStreamServer interface {
	Send(*Big) error
	grpc.ServerStream
}

type bencherBigStreamServer struct {
	grpc.ServerStream
}

func (x *bencherBigStreamServer) Send(m *Big) error {
	return x.ServerStream.SendMsg(m)
}

func _Bencher_MediumStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BencherServer).MediumStream(m, &bencherMediumStreamServer{stream})
}

type Bencher_MediumStreamServer interface {
	Send(*Medium) error
	grpc.ServerStream
}

type bencherMediumStreamServer struct {
	grpc.ServerStream
}

func (x *bencherMediumStreamServer) Send(m *Medium) error {
	return x.ServerStream.SendMsg(m)
}

func _Bencher_SmallStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BencherServer).SmallStream(m, &bencherSmallStreamServer{stream})
}

type Bencher_SmallStreamServer interface {
	Send(*Small) error
	grpc.ServerStream
}

type bencherSmallStreamServer struct {
	grpc.ServerStream
}

func (x *bencherSmallStreamServer) Send(m *Small) error {
	return x.ServerStream.SendMsg(m)
}

var _Bencher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bench.Bencher",
	HandlerType: (*BencherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BigStream",
			Handler:       _Bencher_BigStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MediumStream",
			Handler:       _Bencher_MediumStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SmallStream",
			Handler:       _Bencher_SmallStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorBench,
}

func NewPopulatedRequest(r randyBench, easy bool) *Request {
	this := &Request{}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSmall(r randyBench, easy bool) *Small {
	this := &Small{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	this.Field11 = uint64(uint64(r.Uint32()))
	this.Field14 = randStringBench(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMedium(r randyBench, easy bool) *Medium {
	this := &Medium{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	this.Field4 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field4 *= -1
	}
	this.Field5 = uint32(r.Uint32())
	this.Field6 = uint64(uint64(r.Uint32()))
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	this.Field8 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field8 *= -1
	}
	this.Field9 = uint32(r.Uint32())
	this.Field10 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field10 *= -1
	}
	this.Field11 = uint64(uint64(r.Uint32()))
	this.Field12 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field12 *= -1
	}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	this.Field14 = randStringBench(r)
	v1 := r.Intn(100)
	this.Field15 = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBig(r randyBench, easy bool) *Big {
	this := &Big{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	if r.Intn(10) != 0 {
		this.Field3 = NewPopulatedMedium(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Field4 = make([]*Small, v2)
		for i := 0; i < v2; i++ {
			this.Field4[i] = NewPopulatedSmall(r, easy)
		}
	}
	this.Field6 = uint64(uint64(r.Uint32()))
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	if r.Intn(10) != 0 {
		this.Field8 = NewPopulatedMedium(r, easy)
	}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	this.Field14 = randStringBench(r)
	v3 := r.Intn(100)
	this.Field15 = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyBench interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBench(r randyBench) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBench(r randyBench) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneBench(r)
	}
	return string(tmps)
}
func randUnrecognizedBench(r randyBench, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldBench(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldBench(data []byte, r randyBench, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateBench(data, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		data = encodeVarintPopulateBench(data, uint64(v5))
	case 1:
		data = encodeVarintPopulateBench(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateBench(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateBench(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateBench(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateBench(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovBench(uint64(m.Num))
	}
	return n
}

func (m *Small) Size() (n int) {
	var l int
	_ = l
	if m.Field3 != 0 {
		n += 1 + sovBench(uint64(m.Field3))
	}
	if m.Field11 != 0 {
		n += 9
	}
	l = len(m.Field14)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *Medium) Size() (n int) {
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 9
	}
	if m.Field2 != 0 {
		n += 5
	}
	if m.Field3 != 0 {
		n += 1 + sovBench(uint64(m.Field3))
	}
	if m.Field4 != 0 {
		n += 1 + sovBench(uint64(m.Field4))
	}
	if m.Field5 != 0 {
		n += 1 + sovBench(uint64(m.Field5))
	}
	if m.Field6 != 0 {
		n += 1 + sovBench(uint64(m.Field6))
	}
	if m.Field7 != 0 {
		n += 1 + sozBench(uint64(m.Field7))
	}
	if m.Field8 != 0 {
		n += 1 + sozBench(uint64(m.Field8))
	}
	if m.Field9 != 0 {
		n += 5
	}
	if m.Field10 != 0 {
		n += 5
	}
	if m.Field11 != 0 {
		n += 9
	}
	if m.Field12 != 0 {
		n += 9
	}
	if m.Field13 {
		n += 2
	}
	l = len(m.Field14)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Field15)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *Big) Size() (n int) {
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 9
	}
	if m.Field2 != 0 {
		n += 5
	}
	if m.Field3 != nil {
		l = m.Field3.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if len(m.Field4) > 0 {
		for _, e := range m.Field4 {
			l = e.Size()
			n += 1 + l + sovBench(uint64(l))
		}
	}
	if m.Field6 != 0 {
		n += 1 + sovBench(uint64(m.Field6))
	}
	if m.Field7 != 0 {
		n += 1 + sozBench(uint64(m.Field7))
	}
	if m.Field8 != nil {
		l = m.Field8.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.Field13 {
		n += 2
	}
	l = len(m.Field14)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Field15)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func sovBench(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBench(x uint64) (n int) {
	return sovBench(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBenchUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Small) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Small: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Small: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			m.Field3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field11", wireType)
			}
			if iNdEx+8 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field11 = *(*uint64)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 8
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field14 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Medium) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Medium: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Medium: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			if iNdEx+8 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field1 = *(*float64)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 8
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			m.Field3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			m.Field4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			m.Field5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field5 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			m.Field6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Field7 = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Field8 = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field9 = *(*uint32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field10 = *(*int32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field11", wireType)
			}
			if iNdEx+8 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field11 = *(*uint64)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field12", wireType)
			}
			if iNdEx+8 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field12 = *(*int64)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 8
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field13", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field13 = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field14 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field15", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field15 = append(m.Field15[:0], data[iNdEx:postIndex]...)
			if m.Field15 == nil {
				m.Field15 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Big) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Big: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Big: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			if iNdEx+8 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field1 = *(*float64)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 8
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field3 == nil {
				m.Field3 = &Medium{}
			}
			if err := m.Field3.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field4 = append(m.Field4, &Small{})
			if err := m.Field4[len(m.Field4)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			m.Field6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Field6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Field7 = v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field8 == nil {
				m.Field8 = &Medium{}
			}
			if err := m.Field8.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field13", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field13 = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field14 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field15", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field15 = append(m.Field15[:0], data[iNdEx:postIndex]...)
			if m.Field15 == nil {
				m.Field15 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBenchUnsafe(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBenchUnsafe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBenchUnsafe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBenchUnsafe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBenchUnsafe(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBenchUnsafe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBenchUnsafe   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("combos/unsafeunmarshaler/bench.proto", fileDescriptorBench) }

var fileDescriptorBench = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6e, 0xda, 0x30,
	0x18, 0xc7, 0xf9, 0x48, 0x49, 0x8a, 0x81, 0xb6, 0xf3, 0x61, 0xb2, 0x3a, 0xc9, 0xb2, 0x10, 0x95,
	0xbc, 0x43, 0x49, 0x08, 0xd0, 0xd2, 0x6b, 0x0e, 0xbb, 0x6d, 0x07, 0x78, 0x82, 0x84, 0x9a, 0x10,
	0x89, 0x90, 0x2d, 0x90, 0xfb, 0x1e, 0x62, 0xef, 0xb0, 0x3d, 0xca, 0x8e, 0x7b, 0x84, 0x92, 0xbd,
	0xc0, 0x8e, 0x3d, 0xec, 0x30, 0xcd, 0x71, 0xcc, 0xa2, 0x29, 0x12, 0x93, 0x76, 0xcb, 0xf7, 0xfb,
	0x3b, 0xfe, 0x3e, 0xff, 0xff, 0x36, 0x1a, 0x2c, 0x93, 0x38, 0x48, 0x76, 0x76, 0xb6, 0xdd, 0xf9,
	0x2b, 0x91, 0x6d, 0x63, 0x3f, 0xdd, 0xad, 0xfd, 0x8d, 0x48, 0xed, 0x40, 0x6c, 0x97, 0xeb, 0xe1,
	0xfb, 0x34, 0xd9, 0x27, 0xb8, 0x25, 0x8b, 0xeb, 0xdb, 0x30, 0xda, 0xaf, 0xb3, 0x60, 0xb8, 0x4c,
	0x62, 0x3b, 0x4c, 0xc2, 0xc4, 0x96, 0x6a, 0x90, 0xad, 0x64, 0x25, 0x0b, 0xf9, 0x55, 0xfc, 0xd5,
	0x7f, 0x85, 0xac, 0xb9, 0xf8, 0x90, 0x89, 0xdd, 0x1e, 0x5f, 0x21, 0xe3, 0x5d, 0x16, 0x13, 0x60,
	0xc0, 0x8d, 0xb9, 0xb1, 0xcd, 0xe2, 0xfe, 0x02, 0xb5, 0x16, 0xb1, 0xbf, 0xd9, 0xe0, 0x97, 0xc8,
	0x7c, 0x13, 0x89, 0xcd, 0xe3, 0x98, 0x18, 0x0c, 0x78, 0x6b, 0x6e, 0xae, 0x64, 0x85, 0x09, 0xb2,
	0x24, 0x1f, 0x8d, 0x48, 0x87, 0x01, 0x37, 0xe7, 0xd6, 0xaa, 0x28, 0x8f, 0xca, 0x84, 0x5c, 0x30,
	0xe0, 0xed, 0x52, 0x99, 0xf4, 0x7f, 0x36, 0x91, 0xf9, 0x56, 0x3c, 0x46, 0x59, 0xac, 0xb7, 0x1d,
	0xc9, 0xa6, 0xa0, 0xb6, 0x1d, 0x69, 0xee, 0x92, 0x26, 0x03, 0xde, 0x54, 0xdc, 0xad, 0x1d, 0xa3,
	0xe4, 0x13, 0x72, 0x26, 0x87, 0x2f, 0xf8, 0x44, 0xf3, 0x29, 0x69, 0x31, 0xe0, 0x3d, 0xc5, 0xa7,
	0x9a, 0xdf, 0x11, 0x93, 0x01, 0x3f, 0x53, 0xfc, 0x4e, 0xf3, 0x7b, 0x62, 0x31, 0xe0, 0x2f, 0x14,
	0xbf, 0xd7, 0x7c, 0x46, 0xce, 0x19, 0x70, 0xac, 0xf8, 0x4c, 0xf3, 0x07, 0xd2, 0x66, 0xc0, 0x2d,
	0xc5, 0x1f, 0x8e, 0x87, 0x77, 0x08, 0x62, 0xc0, 0x2f, 0xcb, 0xc3, 0x3b, 0xa7, 0x18, 0xe6, 0x92,
	0x2e, 0x03, 0x7e, 0x55, 0x2a, 0xee, 0x51, 0x19, 0x93, 0x1e, 0x03, 0x7e, 0x5e, 0x2a, 0xe3, 0x7a,
	0x93, 0x8f, 0xca, 0x94, 0x5c, 0x32, 0xe0, 0xdd, 0x52, 0x99, 0xf6, 0x3f, 0x37, 0x91, 0xe1, 0x45,
	0xe1, 0x3f, 0x7b, 0x7f, 0x53, 0xf1, 0xbe, 0xe3, 0xf6, 0x86, 0xc5, 0xe5, 0x2b, 0xa2, 0xd4, 0x51,
	0x0c, 0xfe, 0x88, 0xc2, 0xe0, 0x1d, 0xb7, 0xab, 0x96, 0xc9, 0x7b, 0xf4, 0x57, 0x30, 0xa7, 0x06,
	0x70, 0x53, 0x09, 0xa0, 0xa6, 0xf9, 0xec, 0xff, 0x3a, 0xe5, 0x7e, 0x02, 0x64, 0x79, 0xbf, 0xdb,
	0x88, 0x14, 0xbf, 0x46, 0x6d, 0x2f, 0x0a, 0x17, 0xfb, 0x54, 0xf8, 0x31, 0xbe, 0x50, 0xdd, 0xd5,
	0xc3, 0xb9, 0x46, 0xaa, 0xf6, 0xa2, 0xd0, 0x01, 0x6c, 0xa3, 0x6e, 0x31, 0x56, 0xcd, 0xea, 0xea,
	0xec, 0x0e, 0xe0, 0x5b, 0xd4, 0x91, 0xee, 0xd4, 0xac, 0xaf, 0x38, 0xe8, 0x80, 0x37, 0x78, 0x3a,
	0x50, 0xf8, 0x71, 0xa0, 0xf0, 0x7c, 0xa0, 0xf0, 0x25, 0xa7, 0xf0, 0x35, 0xa7, 0x8d, 0x6f, 0x39,
	0x6d, 0x3c, 0xe5, 0x14, 0x9e, 0x73, 0xda, 0xf8, 0xf8, 0x9d, 0x42, 0x60, 0xca, 0xe7, 0x3d, 0xfe,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x75, 0x9f, 0x19, 0xa4, 0x3c, 0x04, 0x00, 0x00,
}
